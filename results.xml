<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="2" time="0.293" timestamp="2023-05-14T23:47:40.803223" hostname="VVAUCHEY2"><testcase classname="libs.ArucoCV.ArucoTest" name="test_detect" time="0.012"><failure message="AssertionError: 28 != 29">self = &lt;ArucoCV.ArucoTest testMethod=test_detect&gt;

    def test_detect(self):
    
    
        aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_1000)
        harucoDetect = HarucoDetect(aruco_dict)
        #fake mtx and dist
        mtx = np.array([[638.46300278,           0., 337.7732507 ],
                 [          0., 637.68233074, 277.09219809],
                 [          0.,           0.,           1.]])
        dist = np.array([[ 0.1128955 ,  0.38226535,  0.01402137,  0.00912032, -1.51235606]])
        arucoSize = 0.20 #0.20
    
        #create an image with aruco
        blank_image = np.zeros((640,480), np.uint8)
        blank_image[:,:]=255
        markerImage23= cv2.aruco.generateImageMarker(aruco_dict, 23, 200, 1)
        blank_image[100:300,100:300]=markerImage23
        image,distancedxyzrpy = harucoDetect.processImage(blank_image,arucoSize,mtx,dist, idList=[23,28])
        print ("distancedxyzrpy="+str(distancedxyzrpy))
        self.assertEqual(distancedxyzrpy[0][0], 23)#check detection
    
        markerImage28= cv2.aruco.generateImageMarker(aruco_dict, 28, 200, 1)
        blank_image[100:300,100:300]=markerImage28
        image,distancedxyzrpy = harucoDetect.processImage(blank_image,arucoSize,mtx,dist, idList=[23,28])
&gt;       self.assertEqual(distancedxyzrpy[0][0], 29)#check detection
E       AssertionError: 28 != 29

libs\ArucoCV.py:133: AssertionError</failure></testcase><testcase classname="libs.ArucoCV.ArucoTest" name="test_instanciate" time="0.001" /></testsuite></testsuites>